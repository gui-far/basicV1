### ===============================================
### Authentication API - REST Client Requests
### ===============================================
###
### Prerequisites:
### 1. Install "REST Client" extension in VS Code
### 2. Start the server: npm run start:dev
### 3. Server must be running on http://localhost:3000
###
### Usage:
### - Click "Send Request" above each request
### - Variables are saved automatically between requests
### - Access token from signin is used in signout
###
### ===============================================

@baseUrl = http://localhost:3000
@contentType = application/json

### ===============================================
### 1. SIGNUP ENDPOINT
### ===============================================

### 1.1 Create New User (Success)
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "user@example.com",
  "password": "password123"
}

### 1.2 Signup with Different User
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "another@example.com",
  "password": "secure123"
}

### 1.3 Signup - Duplicate Email (409 Conflict)
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "user@example.com",
  "password": "password123"
}

### 1.4 Signup - Invalid Email (400 Bad Request)
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "invalid-email-format",
  "password": "password123"
}

### 1.5 Signup - Short Password (400 Bad Request)
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "test@example.com",
  "password": "12345"
}

### 1.6 Signup - Missing Email (400 Bad Request)
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "password": "password123"
}

### 1.7 Signup - Missing Password (400 Bad Request)
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "test@example.com"
}

### ===============================================
### 2. SIGNIN ENDPOINT
### ===============================================

### 2.1 Signin with Valid Credentials (Success)
### Note: Copy the accessToken from response for signout request
# @name signin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "user@example.com",
  "password": "password123"
}

### 2.2 Save Access Token from Response
@accessToken = {{signin.response.body.accessToken}}
@refreshToken = {{signin.response.body.refreshToken}}

### 2.3 Signin - Wrong Password (401 Unauthorized)
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "user@example.com",
  "password": "wrongpassword"
}

### 2.4 Signin - Non-existent User (401 Unauthorized)
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "nonexistent@example.com",
  "password": "password123"
}

### 2.5 Signin - Missing Email (400 Bad Request)
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "password": "password123"
}

### 2.6 Signin - Missing Password (400 Bad Request)
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "user@example.com"
}

### ===============================================
### 3. SIGNOUT ENDPOINT
### ===============================================

### 3.1 Signout with Valid Token (Success)
### Note: Run signin request first to get accessToken
POST {{baseUrl}}/auth/signout
Authorization: Bearer {{accessToken}}

### 3.2 Signout - No Token (401 Unauthorized)
POST {{baseUrl}}/auth/signout

### 3.3 Signout - Invalid Token (401 Unauthorized)
POST {{baseUrl}}/auth/signout
Authorization: Bearer invalid-token-here

### 3.4 Signout - Malformed Authorization Header (401 Unauthorized)
POST {{baseUrl}}/auth/signout
Authorization: InvalidFormat

### ===============================================
### 4. SET ADMIN ENDPOINT
### ===============================================

### 4.1 Set Admin - Complete Flow (Admin promotes another user)

### Step 1: Create first user (will be admin automatically)
# @name adminSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "admin123"
}

###

### Step 2: Admin signs in to get token
# @name adminSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "admin123"
}

###

### Step 3: Extract admin token
@adminToken = {{adminSignin.response.body.accessToken}}

###

### Step 4: Create second user (regular user, not admin)
# @name regularUserSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "regular@example.com",
  "password": "regular123"
}

###

### Step 5: Sign in as regular user to get their userId from token
# @name regularUserSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "regular@example.com",
  "password": "regular123"
}

###

### Note: In a real scenario, you'd decode the JWT or have an endpoint to get user info
### For testing, you'll need to get the userId from your database
### Replace 'USER_ID_HERE' with actual userId from database

### Step 6: Admin promotes regular user to admin (Success - 200)
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer {{adminToken}}
Content-Type: {{contentType}}

{
  "userId": "USER_ID_HERE"
}

### 4.2 Set Admin - No Token (401 Unauthorized)
POST {{baseUrl}}/auth/set-admin
Content-Type: {{contentType}}

{
  "userId": "some-user-id"
}

### 4.3 Set Admin - Invalid Token (401 Unauthorized)
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer invalid-token-here
Content-Type: {{contentType}}

{
  "userId": "some-user-id"
}

### 4.4 Set Admin - Non-Admin User Attempts (403 Forbidden)
### Note: This uses a regular user's token (not admin)
### First, sign in as a regular user (second or third user created)

# @name nonAdminSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "another@example.com",
  "password": "secure123"
}

###

@nonAdminToken = {{nonAdminSignin.response.body.accessToken}}

###

### Now try to set admin with non-admin token
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer {{nonAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "some-user-id"
}

### 4.5 Set Admin - User Not Found (404 Not Found)
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer {{adminToken}}
Content-Type: {{contentType}}

{
  "userId": "non-existent-user-id-12345"
}

### 4.6 Set Admin - Missing userId (400 Bad Request)
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer {{adminToken}}
Content-Type: {{contentType}}

{
}

### 4.7 Set Admin - Invalid userId Type (400 Bad Request)
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer {{adminToken}}
Content-Type: {{contentType}}

{
  "userId": 123456
}

### 4.8 Set Admin - Empty userId (400 Bad Request)
POST {{baseUrl}}/auth/set-admin
Authorization: Bearer {{adminToken}}
Content-Type: {{contentType}}

{
  "userId": ""
}

### ===============================================
### 5. INTEGRATION FLOW
### ===============================================

### 5.1 Complete Flow: Signup → Signin → Signout

### Step 1: Create Account
# @name flowSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "flow@example.com",
  "password": "password123"
}

###

### Step 2: Sign In
# @name flowSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "flow@example.com",
  "password": "password123"
}

###

### Step 3: Get Token from Signin
@flowAccessToken = {{flowSignin.response.body.accessToken}}

###

### Step 4: Sign Out
POST {{baseUrl}}/auth/signout
Authorization: Bearer {{flowAccessToken}}

###

### Step 5: Try to Sign In Again (Should Work)
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "flow@example.com",
  "password": "password123"
}

### ===============================================
### 6. TESTING SCENARIOS
### ===============================================

### 6.1 Test Multiple Users
# @name user1Signin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "user@example.com",
  "password": "password123"
}

###

# @name user2Signin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "another@example.com",
  "password": "secure123"
}

###

@user1Token = {{user1Signin.response.body.accessToken}}
@user2Token = {{user2Signin.response.body.accessToken}}

###

### Signout User 1
POST {{baseUrl}}/auth/signout
Authorization: Bearer {{user1Token}}

###

### Signout User 2
POST {{baseUrl}}/auth/signout
Authorization: Bearer {{user2Token}}

### ===============================================
### 7. GROUP ENDPOINTS
### ===============================================

### 7.1 Create Group - Complete Flow

### Step 1: Create admin user (first user, auto admin)
# @name groupAdminSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "groupadmin@example.com",
  "password": "admin123"
}

###

### Step 2: Admin signs in
# @name groupAdminSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "groupadmin@example.com",
  "password": "admin123"
}

###

### Step 3: Extract admin token
@groupAdminToken = {{groupAdminSignin.response.body.accessToken}}
@groupAdminUserId = {{groupAdminSignin.response.body.userId}}

###

### Step 4: Create a regular user
# @name groupRegularUserSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "groupuser@example.com",
  "password": "user123"
}

###

### Step 5: Regular user signs in
# @name groupRegularUserSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "groupuser@example.com",
  "password": "user123"
}

###

### Step 6: Extract regular user token and ID
@groupRegularUserToken = {{groupRegularUserSignin.response.body.accessToken}}
@groupRegularUserId = {{groupRegularUserSignin.response.body.userId}}

###

### 7.2 Create Group as Admin (Success - 201)
# @name createGroup
POST {{baseUrl}}/group/create
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "name": "Development Team"
}

###

### Step 7: Extract group ID
@groupId = {{createGroup.response.body.id}}

###

### 7.3 Create Another Group (Success - 201)
# @name createGroup2
POST {{baseUrl}}/group/create
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "name": "QA Team"
}

###

@groupId2 = {{createGroup2.response.body.id}}

###

### 7.4 Create Group - Duplicate Name (409 Conflict)
POST {{baseUrl}}/group/create
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "name": "Development Team"
}

###

### 7.5 Create Group - No Token (401 Unauthorized)
POST {{baseUrl}}/group/create
Content-Type: {{contentType}}

{
  "name": "Test Group"
}

###

### 7.6 Create Group - Non-Admin (403 Forbidden)
POST {{baseUrl}}/group/create
Authorization: Bearer {{groupRegularUserToken}}
Content-Type: {{contentType}}

{
  "name": "Test Group"
}

###

### 7.7 Create Group - Missing Name (400 Bad Request)
POST {{baseUrl}}/group/create
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "name": ""
}

###

### ===============================================
### 8. ADD USER TO GROUP
### ===============================================

### 8.1 Add User to Group as Admin (Success - 201)
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 8.2 Add User to Group - Already in Group (409 Conflict)
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 8.3 Add User to Group - User Not Found (404 Not Found)
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "non-existent-user-id",
  "groupId": "{{groupId}}"
}

###

### 8.4 Add User to Group - Group Not Found (404 Not Found)
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "non-existent-group-id"
}

###

### 8.5 Add User to Group - No Token (401 Unauthorized)
POST {{baseUrl}}/group/add-user
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 8.6 Add User to Group - Non-Admin (403 Forbidden)
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{groupRegularUserToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### ===============================================
### 9. REMOVE USER FROM GROUP
### ===============================================

### 9.1 Remove User from Group as Admin (Success - 201)
POST {{baseUrl}}/group/remove-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 9.2 Remove User from Group - User Not in Group (404 Not Found)
POST {{baseUrl}}/group/remove-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 9.3 Remove User from Group - No Token (401 Unauthorized)
POST {{baseUrl}}/group/remove-user
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 9.4 Remove User from Group - Non-Admin (403 Forbidden)
POST {{baseUrl}}/group/remove-user
Authorization: Bearer {{groupRegularUserToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### ===============================================
### 10. DELETE GROUP
### ===============================================

### 10.1 Delete Group with No Users (Success - 200)
DELETE {{baseUrl}}/group/{{groupId2}}
Authorization: Bearer {{groupAdminToken}}

###

### 10.2 Add User to Group (for delete with users test)
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 10.3 Delete Group with Users (400 Bad Request)
DELETE {{baseUrl}}/group/{{groupId}}
Authorization: Bearer {{groupAdminToken}}

###

### 10.4 Remove User from Group (for successful delete)
POST {{baseUrl}}/group/remove-user
Authorization: Bearer {{groupAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{groupRegularUserId}}",
  "groupId": "{{groupId}}"
}

###

### 10.5 Delete Group Successfully (200 OK)
DELETE {{baseUrl}}/group/{{groupId}}
Authorization: Bearer {{groupAdminToken}}

###

### 10.6 Delete Group - Group Not Found (404 Not Found)
DELETE {{baseUrl}}/group/non-existent-group-id
Authorization: Bearer {{groupAdminToken}}

###

### 10.7 Delete Group - No Token (401 Unauthorized)
DELETE {{baseUrl}}/group/{{groupId}}

###

### 10.8 Delete Group - Non-Admin (403 Forbidden)
DELETE {{baseUrl}}/group/{{groupId}}
Authorization: Bearer {{groupRegularUserToken}}

###

### ===============================================
### 11. ENDPOINT ENDPOINTS
### ===============================================

### 11.1 Create Endpoint - Complete Flow

### Step 1: Create admin user (first user, auto admin)
# @name endpointAdminSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "endpointadmin@example.com",
  "password": "admin123"
}

###

### Step 2: Admin signs in
# @name endpointAdminSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "endpointadmin@example.com",
  "password": "admin123"
}

###

### Step 3: Extract admin token
@endpointAdminToken = {{endpointAdminSignin.response.body.accessToken}}
@endpointAdminUserId = {{endpointAdminSignin.response.body.userId}}

###

### Step 4: Create a regular user
# @name endpointRegularUserSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "endpointuser@example.com",
  "password": "user123"
}

###

### Step 5: Regular user signs in
# @name endpointRegularUserSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "endpointuser@example.com",
  "password": "user123"
}

###

### Step 6: Extract regular user token and ID
@endpointRegularUserToken = {{endpointRegularUserSignin.response.body.accessToken}}
@endpointRegularUserId = {{endpointRegularUserSignin.response.body.userId}}

###

### 11.2 Create Endpoint as Admin (Success - 201)
# @name createEndpoint
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "description": "Get all users",
  "path": "/api/users",
  "method": "GET",
  "isPublic": false
}

###

### Step 7: Extract endpoint ID
@endpointId = {{createEndpoint.response.body.id}}

###

### 11.3 Create Another Endpoint (Success - 201)
# @name createEndpoint2
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "description": "Create user",
  "path": "/api/users",
  "method": "POST",
  "isPublic": false
}

###

@endpointId2 = {{createEndpoint2.response.body.id}}

###

### 11.4 Create Public Endpoint (Success - 201)
# @name createPublicEndpoint
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "description": "Public health check",
  "path": "/api/health",
  "method": "GET",
  "isPublic": true
}

###

@publicEndpointId = {{createPublicEndpoint.response.body.id}}

###

### 11.5 Create Endpoint - No Token (401 Unauthorized)
POST {{baseUrl}}/endpoint/create
Content-Type: {{contentType}}

{
  "description": "Test endpoint",
  "path": "/api/test",
  "method": "GET",
  "isPublic": false
}

###

### 11.6 Create Endpoint - Non-Admin (403 Forbidden)
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{endpointRegularUserToken}}
Content-Type: {{contentType}}

{
  "description": "Test endpoint",
  "path": "/api/test",
  "method": "GET",
  "isPublic": false
}

###

### 11.7 Create Endpoint - Missing Fields (400 Bad Request)
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "description": ""
}

###

### ===============================================
### 12. ADD ENDPOINT TO GROUP
### ===============================================

### 12.1 Create Group for Endpoint Tests
# @name createGroupForEndpoint
POST {{baseUrl}}/group/create
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "name": "API Access Group"
}

###

@endpointGroupId = {{createGroupForEndpoint.response.body.id}}

###

### 12.2 Add Endpoint to Group as Admin (Success - 201)
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 12.3 Add Endpoint to Group - Already in Group (409 Conflict)
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 12.4 Add Endpoint to Group - Endpoint Not Found (404 Not Found)
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "non-existent-endpoint-id",
  "groupId": "{{endpointGroupId}}"
}

###

### 12.5 Add Endpoint to Group - Group Not Found (404 Not Found)
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "non-existent-group-id"
}

###

### 12.6 Add Endpoint to Group - No Token (401 Unauthorized)
POST {{baseUrl}}/endpoint/add-to-group
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 12.7 Add Endpoint to Group - Non-Admin (403 Forbidden)
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{endpointRegularUserToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### ===============================================
### 13. REMOVE ENDPOINT FROM GROUP
### ===============================================

### 13.1 Remove Endpoint from Group as Admin (Success - 201)
POST {{baseUrl}}/endpoint/remove-from-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 13.2 Remove Endpoint from Group - Endpoint Not in Group (404 Not Found)
POST {{baseUrl}}/endpoint/remove-from-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 13.3 Remove Endpoint from Group - No Token (401 Unauthorized)
POST {{baseUrl}}/endpoint/remove-from-group
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 13.4 Remove Endpoint from Group - Non-Admin (403 Forbidden)
POST {{baseUrl}}/endpoint/remove-from-group
Authorization: Bearer {{endpointRegularUserToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### ===============================================
### 14. DELETE ENDPOINT
### ===============================================

### 14.1 Delete Endpoint with No Groups (Success - 200)
DELETE {{baseUrl}}/endpoint/{{publicEndpointId}}
Authorization: Bearer {{endpointAdminToken}}

###

### 14.2 Add Endpoint to Group (for delete with groups test)
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 14.3 Delete Endpoint with Groups (400 Bad Request)
DELETE {{baseUrl}}/endpoint/{{endpointId}}
Authorization: Bearer {{endpointAdminToken}}

###

### 14.4 Remove Endpoint from Group (for successful delete)
POST {{baseUrl}}/endpoint/remove-from-group
Authorization: Bearer {{endpointAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{endpointId}}",
  "groupId": "{{endpointGroupId}}"
}

###

### 14.5 Delete Endpoint Successfully (200 OK)
DELETE {{baseUrl}}/endpoint/{{endpointId}}
Authorization: Bearer {{endpointAdminToken}}

###

### 14.6 Delete Endpoint - Endpoint Not Found (404 Not Found)
DELETE {{baseUrl}}/endpoint/non-existent-endpoint-id
Authorization: Bearer {{endpointAdminToken}}

###

### 14.7 Delete Endpoint - No Token (401 Unauthorized)
DELETE {{baseUrl}}/endpoint/{{endpointId2}}

###

### 14.8 Delete Endpoint - Non-Admin (403 Forbidden)
DELETE {{baseUrl}}/endpoint/{{endpointId2}}
Authorization: Bearer {{endpointRegularUserToken}}

###

### ===============================================
### 15. ENDPOINT ACCESS CONTROL (PROMPT 009)
### ===============================================
### This section demonstrates the dynamic endpoint access control guard
### Access Rules:
### - Admins: Access ALL endpoints
### - Public Endpoints: Accessible to everyone
### - Regular Users: Only access endpoints in groups they belong to

### 15.1 Setup: Create Test Users and Data

### Step 1: Create admin user
# @name accessControlAdmin
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "accessadmin@example.com",
  "password": "admin123"
}

###

# @name accessControlAdminSignin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "accessadmin@example.com",
  "password": "admin123"
}

###

@accessAdminToken = {{accessControlAdminSignin.response.body.accessToken}}
@accessAdminUserId = {{accessControlAdminSignin.response.body.userId}}

###

### Step 2: Create two regular users
# @name accessUser1Signup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "accessuser1@example.com",
  "password": "user123"
}

###

# @name accessUser1Signin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "accessuser1@example.com",
  "password": "user123"
}

###

@accessUser1Token = {{accessUser1Signin.response.body.accessToken}}
@accessUser1Id = {{accessUser1Signin.response.body.userId}}

###

# @name accessUser2Signup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "accessuser2@example.com",
  "password": "user123"
}

###

# @name accessUser2Signin
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "accessuser2@example.com",
  "password": "user123"
}

###

@accessUser2Token = {{accessUser2Signin.response.body.accessToken}}
@accessUser2Id = {{accessUser2Signin.response.body.userId}}

###

### Step 3: Create Groups
# @name accessGroup1
POST {{baseUrl}}/group/create
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "name": "Developers Group"
}

###

@accessGroupId1 = {{accessGroup1.response.body.id}}

###

# @name accessGroup2
POST {{baseUrl}}/group/create
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "name": "Marketing Group"
}

###

@accessGroupId2 = {{accessGroup2.response.body.id}}

###

### Step 4: Create Endpoints (Protected and Public)
# @name protectedEndpoint1
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "description": "Get user profile",
  "path": "/api/users/profile",
  "method": "GET",
  "isPublic": false
}

###

@protectedEndpointId1 = {{protectedEndpoint1.response.body.id}}

###

# @name protectedEndpoint2
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "description": "Get analytics data",
  "path": "/api/analytics",
  "method": "GET",
  "isPublic": false
}

###

@protectedEndpointId2 = {{protectedEndpoint2.response.body.id}}

###

# @name publicEndpoint
POST {{baseUrl}}/endpoint/create
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "description": "Public health check",
  "path": "/api/health",
  "method": "GET",
  "isPublic": true
}

###

@publicEndpointId = {{publicEndpoint.response.body.id}}

###

### Step 5: Add User1 to Developers Group
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{accessUser1Id}}",
  "groupId": "{{accessGroupId1}}"
}

###

### Step 6: Add User2 to Marketing Group
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{accessUser2Id}}",
  "groupId": "{{accessGroupId2}}"
}

###

### Step 7: Add Endpoint1 to Developers Group
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{protectedEndpointId1}}",
  "groupId": "{{accessGroupId1}}"
}

###

### Step 8: Add Endpoint2 to Marketing Group
POST {{baseUrl}}/endpoint/add-to-group
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "endpointId": "{{protectedEndpointId2}}",
  "groupId": "{{accessGroupId2}}"
}

###

### ===============================================
### 15.2 Test Scenarios
### ===============================================

### Scenario 1: Admin can access ANY endpoint (even not in any group)
### Expected: 200 OK (admin bypasses all checks)
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{accessAdminToken}}

###

GET {{baseUrl}}/api/analytics
Authorization: Bearer {{accessAdminToken}}

###

### Scenario 2: Regular User1 can access endpoint in their group (Developers)
### Expected: 200 OK (user1 is in Developers group, endpoint1 is in Developers group)
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{accessUser1Token}}

###

### Scenario 3: Regular User1 CANNOT access endpoint NOT in their group
### Expected: 403 Forbidden (user1 is NOT in Marketing group)
GET {{baseUrl}}/api/analytics
Authorization: Bearer {{accessUser1Token}}

###

### Scenario 4: Regular User2 can access endpoint in their group (Marketing)
### Expected: 200 OK (user2 is in Marketing group, endpoint2 is in Marketing group)
GET {{baseUrl}}/api/analytics
Authorization: Bearer {{accessUser2Token}}

###

### Scenario 5: Regular User2 CANNOT access endpoint NOT in their group
### Expected: 403 Forbidden (user2 is NOT in Developers group)
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{accessUser2Token}}

###

### Scenario 6: Anyone can access PUBLIC endpoints (even unauthenticated)
### Expected: 200 OK (public endpoint, no auth required)
GET {{baseUrl}}/api/health

###

### Scenario 7: Authenticated users can access public endpoints
### Expected: 200 OK
GET {{baseUrl}}/api/health
Authorization: Bearer {{accessUser1Token}}

###

GET {{baseUrl}}/api/health
Authorization: Bearer {{accessUser2Token}}

###

### Scenario 8: Unauthenticated user CANNOT access protected endpoint
### Expected: 401 Unauthorized
GET {{baseUrl}}/api/users/profile

###

### Scenario 9: Endpoints NOT in database allow access (backward compatibility)
### Expected: 200 OK or 404 (depending on if route exists, but guard allows it)
GET {{baseUrl}}/some/unregistered/endpoint
Authorization: Bearer {{accessUser1Token}}

###

### ===============================================
### 15.3 Dynamic Access Change
### ===============================================

### Scenario 10: Add User1 to Marketing Group
POST {{baseUrl}}/group/add-user
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{accessUser1Id}}",
  "groupId": "{{accessGroupId2}}"
}

###

### Now User1 can access both endpoints
### Expected: 200 OK (user1 now has access via Marketing group)
GET {{baseUrl}}/api/analytics
Authorization: Bearer {{accessUser1Token}}

###

### Scenario 11: Remove User1 from Developers Group
POST {{baseUrl}}/group/remove-user
Authorization: Bearer {{accessAdminToken}}
Content-Type: {{contentType}}

{
  "userId": "{{accessUser1Id}}",
  "groupId": "{{accessGroupId1}}"
}

###

### Now User1 CANNOT access Developers endpoint
### Expected: 403 Forbidden (user1 no longer in Developers group)
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{accessUser1Token}}

###

### But User1 can still access Marketing endpoint
### Expected: 200 OK
GET {{baseUrl}}/api/analytics
Authorization: Bearer {{accessUser1Token}}

###

### ===============================================
### 16. LIST ENDPOINTS (PROMPT 010)
### ===============================================

### 16.1 List All Users (Admin Only)
GET {{baseUrl}}/auth/users
Authorization: Bearer {{accessAdminToken}}

###

### 16.2 List All Groups (Admin Only)
GET {{baseUrl}}/group
Authorization: Bearer {{groupAdminToken}}

###

### 16.3 List All Endpoints (Admin Only)
GET {{baseUrl}}/endpoint
Authorization: Bearer {{endpointAdminToken}}

###

### 16.4 List Users - No Token (401 Unauthorized)
GET {{baseUrl}}/auth/users

###

### 16.5 List Users - Non-Admin (403 Forbidden)
GET {{baseUrl}}/auth/users
Authorization: Bearer {{accessUser1Token}}

###

### ===============================================
### NOTES:
### ===============================================
###
### Expected Responses:
### - 201: User created successfully (signup), resource created (group, membership, endpoint)
### - 200: Success with data (signin, signout, set-admin, delete group, delete endpoint)
### - 400: Validation error (bad request, group has users, endpoint has groups)
### - 401: Unauthorized (invalid credentials or token, missing authentication)
### - 403: Forbidden (user does not have access to endpoint)
### - 404: Not Found (user, group, membership, endpoint not found)
### - 409: Conflict (duplicate email, group name, membership, or endpoint-group relation)
###
### Admin Functionality:
### - First user to signup automatically becomes admin
### - Only admins can promote other users to admin
### - Only admins can create groups
### - Only admins can add/remove users to/from groups
### - Only admins can delete groups (only if group has no users)
### - Only admins can create endpoints
### - Only admins can add/remove endpoints to/from groups
### - Only admins can delete endpoints (only if endpoint not in any groups)
### - Admin status is included in JWT tokens (isAdmin field)
### - **Admins have access to ALL endpoints (bypass endpoint access control)**
###
### Group Functionality:
### - Groups have unique names
### - One user can be in multiple groups
### - One group can have multiple users
### - Groups can only be deleted if they have no users
### - Many-to-many relationship via UserGroup junction table
###
### Endpoint Functionality:
### - Endpoints have description, path, method, and isPublic fields
### - One endpoint can be in multiple groups
### - One group can have multiple endpoints
### - Endpoints can only be deleted if they are not in any groups
### - Many-to-many relationship via GroupEndpoint junction table
###
### Endpoint Access Control (NEW):
### - **Admins**: Access to ALL endpoints (bypass all checks)
### - **Public Endpoints** (isPublic=true): Accessible to everyone (authenticated or not)
### - **Regular Users**: Only access endpoints in groups they belong to
### - **Unauthenticated**: Can only access public endpoints
### - **Endpoints not in database**: Allow access (backward compatibility)
### - Access is dynamic: Adding/removing users from groups immediately affects access
###
### Tips:
### 1. Run requests in order for integration flow
### 2. Variables (@accessToken, @adminToken, @groupId, @endpointId) are auto-saved between requests
### 3. Use "# @name" to reference responses in other requests
### 4. Check the response panel for detailed error messages
### 5. Server must be running before sending requests
### 6. User IDs are now returned in signin response (userId field)
### 7. Group IDs are returned when creating groups
### 8. Endpoint IDs are returned when creating endpoints
### 9. Test endpoint access control by trying to access endpoints with different user tokens
### 10. The guard checks: isPublic → user role → group membership dynamically
###
### ===============================================

### ===============================================
### 17. GET GROUP DETAILS
### ===============================================
### Description: Get detailed information about a specific group including assigned users and endpoints
### This endpoint returns the group with all its related users and endpoints

### 17.1 Get Group Details (Admin Only)
GET {{baseUrl}}/group/{{groupId}}
Authorization: Bearer {{accessAdminToken}}

### Note: Replace {{groupId}} with an actual group ID from previous requests
### The response will include:
### - Group basic info (id, name, createdAt)
### - List of users assigned to the group (id, email)
### - List of endpoints assigned to the group (id, description, path, method)

###
### ===============================================

### ===============================================
### 18. PASSWORD RESET (FORGOT PASSWORD)
### ===============================================
### Description: Implements forgot password functionality with email-based token reset

### 18.1 Forgot Password - Send Reset Email (Success)
### Expected: 201 Created with success message
### An email will be sent to the user with a reset token
# @name forgotPassword
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "user@example.com"
}

###

### 18.2 Forgot Password - User Not Found (404 Not Found)
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "nonexistent@example.com"
}

###

### 18.3 Forgot Password - Invalid Email Format (400 Bad Request)
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "invalid-email"
}

###

### 18.4 Forgot Password - Missing Email (400 Bad Request)
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
}

###

### ===============================================
### 19. RESET PASSWORD
### ===============================================
### Description: Reset password using token received via email

### NOTE: To test these endpoints, you need to:
### 1. Configure your Gmail credentials in .env file:
###    - MAIL_USER="your-email@gmail.com"
###    - MAIL_PASSWORD="your-app-password"
###    - Get app password from: https://myaccount.google.com/apppasswords
### 2. Send a forgot-password request
### 3. Check your email for the reset token
### 4. Copy the token from the email and use it below

### 19.1 Reset Password with Valid Token (Success)
### Expected: 201 Created with success message
### Replace TOKEN_FROM_EMAIL with the actual token from your email
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "TOKEN_FROM_EMAIL",
  "newPassword": "newpassword123"
}

###

### 19.2 Reset Password - Invalid Token (400 Bad Request)
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "invalid-token-12345",
  "newPassword": "newpassword123"
}

###

### 19.3 Reset Password - Expired Token (400 Bad Request)
### Note: Tokens expire after 60 minutes by default (configurable via TOKEN_EXPIRATION_MINUTES)
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "expired-token-from-email",
  "newPassword": "newpassword123"
}

###

### 19.4 Reset Password - Short Password (400 Bad Request)
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "TOKEN_FROM_EMAIL",
  "newPassword": "12345"
}

###

### 19.5 Reset Password - Missing Fields (400 Bad Request)
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "TOKEN_FROM_EMAIL"
}

###

### ===============================================
### 20. COMPLETE PASSWORD RESET FLOW
### ===============================================
### Description: Full flow demonstrating password reset

### Step 1: Create a test user
# @name resetFlowSignup
POST {{baseUrl}}/auth/signup
Content-Type: {{contentType}}

{
  "email": "resettest@example.com",
  "password": "oldpassword123"
}

###

### Step 2: Sign in with old password
# @name resetFlowSignin1
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "resettest@example.com",
  "password": "oldpassword123"
}

###

@resetFlowToken1 = {{resetFlowSignin1.response.body.accessToken}}

###

### Step 3: Verify signin works (optional)
POST {{baseUrl}}/auth/signout
Authorization: Bearer {{resetFlowToken1}}

###

### Step 4: Request password reset
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "resettest@example.com"
}

###

### Step 5: Check your email for the token
### Copy the token from the email and paste it in the next request

###

### Step 6: Reset password with token from email
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "PASTE_TOKEN_FROM_EMAIL_HERE",
  "newPassword": "newpassword456"
}

###

### Step 7: Try to sign in with OLD password (should fail)
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "resettest@example.com",
  "password": "oldpassword123"
}

###

### Step 8: Sign in with NEW password (should work)
# @name resetFlowSignin2
POST {{baseUrl}}/auth/signin
Content-Type: {{contentType}}

{
  "email": "resettest@example.com",
  "password": "newpassword456"
}

###

@resetFlowToken2 = {{resetFlowSignin2.response.body.accessToken}}

###

### Step 9: Verify new signin works
POST {{baseUrl}}/auth/signout
Authorization: Bearer {{resetFlowToken2}}

###

### ===============================================
